{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogsItem/DialogsItem.module.css","components/Dialogs/Message/Message.module.css","components/Dialogs/DialogsItem/DialogsItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/DialogsForm/DialogSendMessageForm.jsx","components/HOC/withAuthRedirect.jsx","components/Dialogs/DialogsContainer.jsx","components/Dialogs/Dialogs.jsx"],"names":["module","exports","DialogsItem","props","className","d","item","to","id","activeClassName","active","src","image","name","Message","message","maxLength50","maxLength","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","textArea","placeholder","validate","required","btn","type","mapStateToPropsForRedirect","state","isAuthorized","auth","compose","connect","dialogsPage","userInfo","dispatch","addMessage","newPostMessage","addMessageActionCreator","Component","RedirectComponent","this","React","insider","userPhoto","friendsName","friendsId","dialogsElements","dialogsItem","map","dialogs","messageElements","messages","VelimirAva","myself","avatar","userId","userImage","dialogItems","headline","headlineLeft","headlineRight","btnImage","FormData","newMessageBody"],"mappings":"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","file":"static/js/4.ed92897b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"dialogItems\":\"Dialogs_dialogItems__3flRc\",\"item\":\"Dialogs_item__29pPd\",\"messages\":\"Dialogs_messages__1w_Up\",\"active\":\"Dialogs_active__2sQhs\",\"message\":\"Dialogs_message__1xIDh\",\"myself\":\"Dialogs_myself__2WBia\",\"avatar\":\"Dialogs_avatar__1hg1l\",\"headline\":\"Dialogs_headline__DrFEw\",\"headlineLeft\":\"Dialogs_headlineLeft__1aLkY\",\"headlineRight\":\"Dialogs_headlineRight__ZokHe\",\"textArea\":\"Dialogs_textArea__2xhK2\",\"btn\":\"Dialogs_btn__kLfml\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"DialogsItem_item__uGfWO\",\"active\":\"DialogsItem_active__2N6yg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__1MOXo\"};","import d from \"./DialogsItem.module.css\";\nimport {NavLink} from \"react-router-dom\";\n\nexport const DialogsItem = (props) => {\n    return (\n            <div className={d.item}>\n                <NavLink to={`/dialogs/${props.id}`} activeClassName={d.active}>\n                    <img src={props.image} />\n                    {props.name}\n                </NavLink>\n            </div>\n    )\n}","import d from \"./Message.module.css\";\n\nexport const Message = (props) => {\n    return (\n        <div>\n            <div className={d.message}>{props.message} </div>\n        </div>\n    )\n}","import {Field, reduxForm} from \"redux-form\";\nimport d from \"../Dialogs.module.css\";\nimport React from \"react\";\nimport {maxLength, required} from \"../../utils/validators\";\nimport {Textarea} from \"../../FormsControls/FormsControls\";\n\nlet maxLength50 = maxLength(50);\n\nconst DialogSendMessageForm = (props) => {\n    return <form onSubmit={props.handleSubmit}>\n        <Field component={Textarea} className={d.textArea} name={'newMessageBody'}\n               placeholder={'Enter your message'} validate={[required, maxLength50]}/>\n        <Field component={'input'} className={d.btn} type={'image'} src={props.image} />\n    </form>\n}\n\nexport default reduxForm({form:'DialogSendMessageForm'})(DialogSendMessageForm);","import React from 'react';\nimport {Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\n\nlet mapStateToPropsForRedirect = (state) => {\n    return {\n        isAuthorized: state.auth.isAuthorized,\n    }\n}\n\nexport const withAuthRedirect = (Component) => {\n\n    class RedirectComponent extends React.Component {\n        render() {\n            if (!this.props.isAuthorized) return <Redirect to={'/login'}/>\n\n            return <Component {...this.props} />\n        }\n    }\n\n    return connect(mapStateToPropsForRedirect)(RedirectComponent);\n}\n","import React from \"react\";\nimport {addMessageActionCreator, updateNewMessageTextActionCreator} from \"../../redux/dialogs-reducer\";\nimport {Dialogs} from \"./Dialogs\";\nimport {connect} from \"react-redux\";\nimport {withAuthRedirect} from \"../HOC/withAuthRedirect\";\nimport {compose} from \"redux\";\n\nlet mapStateToProps = (state) => {\n    return {\n        dialogsPage: state.dialogsPage,\n        userInfo: state.userInfo,\n        isAuthorized: state.auth.isAuthorized,\n    }\n}\n\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        // updateNewMessageText: (newMessageText) => {\n        //     let action = updateNewMessageTextActionCreator(newMessageText);\n        //     dispatch(action)\n        // },\n        addMessage: (newPostMessage) => {\n            dispatch(addMessageActionCreator(newPostMessage))\n        }\n    }\n}\n\nexport default compose(\n    connect(mapStateToProps, mapDispatchToProps),\n    withAuthRedirect\n)(Dialogs);","import d from \"./Dialogs.module.css\";\nimport {DialogsItem} from \"./DialogsItem/DialogsItem\";\nimport {Message} from \"./Message/Message\";\nimport React from \"react\";\nimport ReduxDialogSendMessageForm from './DialogsForm/DialogSendMessageForm';\n\nexport const Dialogs = (props) => {\n\n    let insider = props.dialogsPage.insider;\n    let userPhoto = null;\n    let friendsName = null;\n    let friendsId = null;\n\n    let dialogsElements = props.userInfo.dialogsItem.map(dialogs =>\n        <DialogsItem key={'forty_one'} name={dialogs.name} id={dialogs.id}/>);\n\n    let messageElements = props.dialogsPage.messages.map(message => {\n        if (message.friendsName === insider) {\n            userPhoto = props.dialogsPage.VelimirAva\n            return (<span key={'forty_two'} className={`${d.message} ${d.myself}`}>\n                    <Message message={message.message} avatar={userPhoto} id={message.id}/>\n                </span>\n            )\n        } else {\n            friendsName = message.friendsName;\n            friendsId = message.userId;\n            userPhoto = props.userInfo.dialogsItem[friendsId].userImage;\n            return (<span className={d.message}>\n                <Message message={message.message} avatar={userPhoto} id={message.id}/>\n            </span>)\n        }\n    });\n\n    userPhoto = props.userInfo.dialogsItem[friendsId].userImage;\n\n    let onSubmit = (FormData) => {\n        debugger\n        props.addMessage(FormData.newMessageBody);\n    }\n\n    return (\n        <div>\n            <div className={d.dialogs}>\n                <div className={d.dialogItems}>\n                    {dialogsElements}\n                </div>\n                <div>\n                    <div className={d.headline}>\n                        <div>\n                            <div className={d.headlineLeft}>\n                                <img className={d.avatar} src={userPhoto}/>\n                                {friendsName}\n                            </div>\n                            <div className={d.headlineRight}>\n                                {props.dialogsPage.insider}\n                                <img className={d.avatar} src={props.dialogsPage.VelimirAva}/>\n                            </div>\n                        </div>\n                    </div>\n                    <div className={d.messages}>\n                        {messageElements}\n                    </div>\n                    <ReduxDialogSendMessageForm image={props.dialogsPage.btnImage} onSubmit={onSubmit}/>\n                    </div>\n            </div>\n        </div>\n    )\n}"],"sourceRoot":""}